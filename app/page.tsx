"use client";

import Head from 'next/head';
import { useState, useEffect, useRef } from 'react';
import { Message, experimental_useAssistant as useAssistant } from "ai/react";
import multiparty from 'multiparty';
import PerfectScrollbar from 'react-perfect-scrollbar';
import 'react-perfect-scrollbar/dist/css/styles.css';

const roleToColorMap: Record<Message["role"], string> = {
  system: "red",
  user: "#ffffff", // User messages in white
  assistant: "#000000", // Assistant messages in black
};

export default function Home() {
  const { status, messages, input, submitMessage, handleInputChange, error, appendMessage } = useAssistant({
    api: "/api/assistant",
  });

  const [showButtons, setShowButtons] = useState(true);
  const [chatStarted, setChatStarted] = useState(false);
  const [loading, setLoading] = useState(false);
  const inputRef = useRef<HTMLInputElement>(null);
  const messagesEndRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]);

  const handleButtonClick = async (message: string) => {
    setShowButtons(false);
    setChatStarted(true);
    handleInputChange({ target: { value: message } });
    await submitMessage({ preventDefault: () => {} });
  };

  const handleFileUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (!file) return;

    const formData = new FormData();
    formData.append('file', file);
    formData.append('message', input);
    formData.append('threadId', '');

    setLoading(true);
    try {
      const response = await fetch('/api/assistant', {
        method: 'POST',
        body: formData,
      });
      const result = await response.json();

      if (result.messages) {
        result.messages.forEach((msg: any) => {
          appendMessage({
            id: msg.id,
            role: msg.role,
            content: msg.content,
          });
        });
      }
    } catch (error) {
      console.error('Error uploading file:', error);
    }
    setLoading(false);
  };

  const handleSubmitMessage = async (e: React.FormEvent) => {
    e.preventDefault();
    setShowButtons(false);
    setChatStarted(true);
    setLoading(true);
    await submitMessage(e);
    setLoading(false);
  };

  const handleKeyDown = async (e: React.KeyboardEvent<HTMLInputElement>) => {
    if (e.key === 'Enter') {
      e.preventDefault();
      await handleSubmitMessage(e as any);
    }
  };

  return (
    <div className="flex flex-col min-h-screen bg-white text-black">
      <Head>
        <title>Immigration Advisor Pro</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <header className="w-full bg-black shadow p-4 flex justify-between items-center text-white fixed top-0 left-0 right-0 z-50">
        <div className="text-xl font-bold flex items-center">
          <img src="/ai.webp" alt="Logo" className="w-8 h-8 mr-2 rounded-full" />
          Immigration Advisor Pro
        </div>
        <nav>
          <ul className="flex space-x-4">
            <li><a href="#home" className="hover:underline">Home</a></li>
            <li><a href="#about" className="hover:underline">About</a></li>
            <li><a href="#contact" className="hover:underline">Contact Us</a></li>
          </ul>
        </nav>
      </header>

      <main className="flex flex-col items-center flex-1 p-4 w-full overflow-hidden mt-16">
        {!chatStarted && (
          <div className="mt-8 text-center">
            <img src="/ai.webp" alt="Profile" className="w-16 h-16 rounded-full mx-auto" />
            <h1 className="text-3xl font-bold mt-4">Immigration Advisor Pro</h1>
            <p className="text-gray-600">By Jhonathan Gutierrez</p>
            <p className="text-gray-500 mt-2">Digital marketing and social media expert, adaptable and user-focused.</p>
          </div>
        )}

        <PerfectScrollbar className={`flex-1 w-full max-w-4xl mt-4 mb-4 ${chatStarted ? "remove-intro" : ""}`} style={{ maxHeight: '70vh', overflowY: 'auto' }}>
          {messages.map((m: Message, index) => (
            <div
              key={m.id}
              className={`whitespace-pre-wrap mb-2 p-4 rounded-lg shadow-lg ${m.role === "user" ? "self-end bg-black text-white" : "self-start bg-gray-300 text-black"}`}
              style={{ color: roleToColorMap[m.role] }}>
              <strong>{`${m.role === "user" ? "You" : "Assistant"}: `}</strong>
              {m.role !== "data" && m.content}
              {m.role === "data" && (
                <>
                  {(m.data as any).description}
                  <br />
                  <pre className={"bg-gray-200 p-2 rounded text-black"}>
                    {JSON.stringify(m.data, null, 2)}
                  </pre>
                </>
              )}
            </div>
          ))}
          <div ref={messagesEndRef} />
          {loading && (
            <div className="flex justify-center mt-4">
              <div className="flex items-center space-x-2">
                <div className="animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-black"></div>
                <span className="text-black">Waiting for response...</span>
              </div>
            </div>
          )}
        </PerfectScrollbar>

        {error && (
          <div className="relative bg-red-500 text-white px-6 py-4 rounded-md">
            <span className="block sm:inline">
              Error: {error.toString()}
            </span>
          </div>
        )}

        {showButtons && (
          <div className="flex flex-wrap justify-center gap-4 mt-4 w-full max-w-4xl">
            <button onClick={() => handleButtonClick('What digital strategy is best for a small business?')} className="bg-black text-white shadow-lg rounded-lg p-4 w-64 text-center hover:bg-gray-800">
              What digital strategy is best for a small business?
            </button>
            <button onClick={() => handleButtonClick('How can I tailor my content to a specific audience?')} className="bg-black text-white shadow-lg rounded-lg p-4 w-64 text-center hover:bg-gray-800">
              How can I tailor my content to a specific audience?
            </button>
            <button onClick={() => handleButtonClick('Tips for using social media analytics effectively?')} className="bg-black text-white shadow-lg rounded-lg p-4 w-64 text-center hover:bg-gray-800">
              Tips for using social media analytics effectively?
            </button>
            <button onClick={() => handleButtonClick('Creative campaign ideas for a new product launch?')} className="bg-black text-white shadow-lg rounded-lg p-4 w-64 text-center hover:bg-gray-800">
              Creative campaign ideas for a new product launch?
            </button>
          </div>
        )}

        <div className="w-full max-w-4xl mb-4">
          <form className="flex items-center border rounded-lg p-4 bg-gray-100 shadow-lg fixed bottom-0 w-full max-w-4xl" onSubmit={handleSubmitMessage}>
            <button type="button" className="p-2 bg-black text-white rounded-full mr-2 relative overflow-hidden hover:bg-gray-800">
              <svg className="inline w-5 h-5" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1M8 12l4-4m0 0l4 4m-4-4v12" />
              </svg>
              <input
                type="file"
                className="absolute inset-0 opacity-0 cursor-pointer"
                onChange={handleFileUpload}
              />
            </button>
            <input
              ref={inputRef}
              type="text"
              placeholder="Message Immigration Advisor Pro"
              className="flex-grow p-4 bg-white border-none focus:ring-0 text-gray-900 rounded-lg shadow-inner"
              value={input}
              onChange={handleInputChange}
              onKeyDown={handleKeyDown}
            />
            <button type="submit" className="p-2 bg-black text-white rounded-full ml-2 hover:bg-gray-800">
              <svg className="inline w-5 h-5" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4v16m8-8H4" />
              </svg>
            </button>
          </form>
        </div>
      </main>

      <footer className="w-full bg-black p-4 text-center text-gray-400">
        <p>ChatGPT can make mistakes. Check important info.</p>
      </footer>
    </div>
  );
}
